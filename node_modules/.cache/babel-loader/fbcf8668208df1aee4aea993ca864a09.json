{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriabredihina/Downloads/skypro-music/src/components/TrackList/TrackList.jsx\";\nimport React from \"react\";\nimport * as S from \"./TrackListStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport Filters from \"../../components/Filters/Filters\";\nimport TrackListTitle from \"../../components/TrackListTitle/TrackListTitle\";\nimport { ItemTracks } from \"../../components/ItemTracks/ItemTracks\";\nimport { shuffledSelector, currentPlaylistSelector, shuffledAllTracksSelector, currentPageSelector, allTracksSelector, favouritesTracksSelector, categoryArrSelector, filtersPlaylistSelector } from \"../../store/selectors/track\";\nimport { setCurrentTrack, setCurrentPlaylist, toggleShuffleTracks, setFilterPlaylist } from \"../../store/slices/track\";\nexport function TrackList({\n  title,\n  error,\n  isLoading,\n  tracks,\n  isFavorites,\n  isMain\n}) {\n  const dispatch = useDispatch();\n  const shuffle = useSelector(shuffledSelector);\n  const allTracks = useSelector(allTracksSelector);\n  const favouritesTracks = useSelector(favouritesTracksSelector);\n  const currentPlaylist = useSelector(currentPlaylistSelector);\n  const shuffleAllTracks = useSelector(shuffledAllTracksSelector);\n  const currentPage = useSelector(currentPageSelector);\n  const categoryArr = useSelector(categoryArrSelector);\n  const arrayTracksAll = shuffle ? shuffleAllTracks : currentPlaylist;\n  const filtersPlaylist = useSelector(filtersPlaylistSelector);\n  useEffect(() => {\n    dispatch(setFilterPlaylist({\n      sort: \"По умолчанию\"\n    }));\n    dispatch(setFilterPlaylist({\n      search: \"\"\n    }));\n    dispatch(setFilterPlaylist({\n      authors: \"\"\n    }));\n    dispatch(setFilterPlaylist({\n      genres: \"\"\n    }));\n  }, [title]);\n  const handleCurrentTrack = track => {\n    if (!filtersPlaylist.isActiveSort && !(filtersPlaylist === null || filtersPlaylist === void 0 ? void 0 : filtersPlaylist.isActiveAuthors)) {\n      if (currentPage === \"Main\") {\n        dispatch(setCurrentPlaylist(allTracks));\n      }\n      if (currentPage === \"Favorites\") {\n        dispatch(setCurrentPlaylist(favouritesTracks));\n      }\n      if (currentPage === \"Category\") {\n        dispatch(setCurrentPlaylist(categoryArr));\n      }\n    } else {\n      dispatch(setCurrentPlaylist(filtersPlaylist.filterTracksArr));\n    }\n    if (shuffle) {\n      dispatch(toggleShuffleTracks({\n        shuffle\n      }));\n    }\n    const indexCurrentTrack = arrayTracksAll.indexOf(track);\n    dispatch(setCurrentTrack({\n      track,\n      indexCurrentTrack\n    }));\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(S.CenterblockH2, {\n    className: \"centerblock__h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, title || \"Треки\"), /*#__PURE__*/React.createElement(Filters, {\n    selectedArrListFilter: currentPage === \"Main\" ? allTracks : currentPage === \"Favourites\" ? favouritesTracks : categoryArr,\n    currentPage: currentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(S.CenterblockContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TrackListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u043F\\u043B\\u0435\\u0439\\u043B\\u0438\\u0441\\u0442, \\u043F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u043F\\u043E\\u0437\\u0436\\u0435\") : /*#__PURE__*/React.createElement(S.ContentPlaylist, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, isLoading && new Array(20).fill().map(() => /*#__PURE__*/React.createElement(ItemTracks, {\n    key: Math.random(),\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  })), tracks && tracks.map(track => /*#__PURE__*/React.createElement(S.PlaylistItem, {\n    key: track.id,\n    onClick: () => handleCurrentTrack(track),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ItemTracks, {\n    key: track.id,\n    onClick: () => handleCurrentTrack(track),\n    isLoading: isLoading,\n    track: track,\n    tracks: tracks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }))))));\n}","map":{"version":3,"names":["React","S","useDispatch","useSelector","useEffect","Filters","TrackListTitle","ItemTracks","shuffledSelector","currentPlaylistSelector","shuffledAllTracksSelector","currentPageSelector","allTracksSelector","favouritesTracksSelector","categoryArrSelector","filtersPlaylistSelector","setCurrentTrack","setCurrentPlaylist","toggleShuffleTracks","setFilterPlaylist","TrackList","title","error","isLoading","tracks","isFavorites","isMain","dispatch","shuffle","allTracks","favouritesTracks","currentPlaylist","shuffleAllTracks","currentPage","categoryArr","arrayTracksAll","filtersPlaylist","sort","search","authors","genres","handleCurrentTrack","track","isActiveSort","isActiveAuthors","filterTracksArr","indexCurrentTrack","indexOf","createElement","Fragment","CenterblockH2","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","selectedArrListFilter","CenterblockContent","ContentPlaylist","Array","fill","map","key","Math","random","PlaylistItem","id","onClick"],"sources":["/Users/viktoriabredihina/Downloads/skypro-music/src/components/TrackList/TrackList.jsx"],"sourcesContent":["import React from \"react\";\nimport * as S from \"./TrackListStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport Filters from \"../../components/Filters/Filters\";\nimport TrackListTitle from \"../../components/TrackListTitle/TrackListTitle\";\nimport {ItemTracks} from \"../../components/ItemTracks/ItemTracks\";\nimport {shuffledSelector,currentPlaylistSelector, shuffledAllTracksSelector, currentPageSelector, allTracksSelector,favouritesTracksSelector,categoryArrSelector,filtersPlaylistSelector,} from \"../../store/selectors/track\";\nimport { setCurrentTrack,setCurrentPlaylist, toggleShuffleTracks, setFilterPlaylist} from \"../../store/slices/track\";\n\nexport function TrackList({ title, error, isLoading, tracks, isFavorites, isMain }) {\n    const dispatch = useDispatch();\n    const shuffle = useSelector(shuffledSelector);\n    const allTracks = useSelector(allTracksSelector);\n    const favouritesTracks = useSelector(favouritesTracksSelector);\n    const currentPlaylist = useSelector(currentPlaylistSelector);\n    const shuffleAllTracks = useSelector(shuffledAllTracksSelector);\n    const currentPage = useSelector(currentPageSelector);\n    const categoryArr = useSelector(categoryArrSelector);\n    const arrayTracksAll = shuffle ? shuffleAllTracks : currentPlaylist;\n    const filtersPlaylist = useSelector(filtersPlaylistSelector);\n\n\n    useEffect(() => {\n      dispatch(setFilterPlaylist({ sort: \"По умолчанию\" }));\n      dispatch(setFilterPlaylist({ search: \"\" }));\n      dispatch(setFilterPlaylist({ authors: \"\" }));\n      dispatch(setFilterPlaylist({ genres: \"\" }));\n    }, [title]);\n  \n  \n    const handleCurrentTrack = (track) => {\n      if (!filtersPlaylist.isActiveSort && !filtersPlaylist?.isActiveAuthors) {\n   \n      if (currentPage === \"Main\") {\n        dispatch(setCurrentPlaylist(allTracks));\n      }\n      if (currentPage === \"Favorites\") {\n        dispatch(setCurrentPlaylist(favouritesTracks));\n      }\n      if (currentPage === \"Category\") {\n        dispatch(setCurrentPlaylist(categoryArr));\n      }\n    } else {\n      dispatch(setCurrentPlaylist(filtersPlaylist.filterTracksArr));\n    }\n  \n      if (shuffle) {\n        dispatch(toggleShuffleTracks({ shuffle }));\n      }\n  \n      const indexCurrentTrack = arrayTracksAll.indexOf(track);\n      dispatch(setCurrentTrack({ track, indexCurrentTrack }));\n    };\n  \n    return (\n      <>\n        <S.CenterblockH2 className=\"centerblock__h2\">\n          {title || \"Треки\"}\n        </S.CenterblockH2>\n        <Filters \n        selectedArrListFilter={\n          currentPage === \"Main\"\n            ? allTracks\n            : currentPage === \"Favourites\"\n            ? favouritesTracks\n            : categoryArr\n        }\n        currentPage={currentPage}/>\n        <S.CenterblockContent>\n          <TrackListTitle />\n          {error ? (\n            <div>Не удалось загрузить плейлист, попробуйте позже</div>\n          ) : (\n            <S.ContentPlaylist>\n              {isLoading &&\n                new Array(20)\n                  .fill()\n                  .map(() => (\n                    <ItemTracks key={Math.random()} isLoading={isLoading} />\n                  ))}\n              {tracks &&\n                tracks.map((track) => (\n                  <S.PlaylistItem\n                    key={track.id}\n                    onClick={() => handleCurrentTrack(track)}\n                  >\n                    <ItemTracks\n                      key={track.id}\n                      onClick={() => handleCurrentTrack(track)}\n                      isLoading={isLoading}\n                      track={track}\n                      tracks={tracks}\n                    />\n                  </S.PlaylistItem>\n                ))}\n            </S.ContentPlaylist>\n          )}\n        </S.CenterblockContent>\n      </>\n    );\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}