{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  allTracks: [],\n  currentPage: \"\",\n  currentTrack: null,\n  indexCurrentTrack: null,\n  isPlaying: false,\n  shuffled: false,\n  shuffledAllTracks: [],\n  favouritesTracks: [],\n  currentPlaylist: [],\n  categoryArr: [],\n  FiltersPlaylist: {\n    authors: [],\n    isActiveAuthors: false,\n    genres: [],\n    isActiveGenres: false,\n    sort: \"По умолчанию\",\n    isActiveSort: false,\n    search: \"\",\n    isActiveSearch: false,\n    filterTracksArr: []\n  }\n};\nconst getShuffledAllTracks = array => {\n  const arrayTracks = new Array(...array);\n  return arrayTracks.sort(() => Math.random() - 0.5);\n};\nexport const trackSlice = createSlice({\n  name: \"tracksReducer\",\n  initialState,\n  reducers: {\n    setAllTracks: (state, action) => {\n      state.allTracks = action.payload;\n    },\n    setFavouriteTracksAll: (state, action) => {\n      state.favouritesTracks = action.payload;\n    },\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    setCurrentPlaylist: (state, action) => {\n      state.currentPlaylist = action.payload;\n    },\n    setCurrentTrack: (state, action) => {\n      const {\n        track,\n        indexCurrentTrack\n      } = action.payload;\n      state.currentTrack = track;\n      state.indexCurrentTrack = indexCurrentTrack;\n    },\n    setNextTrack: (state, action) => {\n      const {\n        trackNext,\n        indexNextTrack\n      } = action.payload;\n      state.currentTrack = trackNext;\n      state.indexCurrentTrack = indexNextTrack;\n    },\n    setPrevTrack: (state, action) => {\n      const {\n        trackPred,\n        indexPredTrack\n      } = action.payload;\n      state.currentTrack = trackPred;\n      state.indexCurrentTrack = indexPredTrack;\n    },\n    setCategoryArr: (state, action) => {\n      state.categoryArr = action.payload;\n    },\n    toggleShuffleTracks: (state, action) => {\n      state.shuffled = action.payload;\n      if (state.shuffled) {}\n      state.shuffledAllTracks = state.shuffled && getShuffledAllTracks(state.currentPlaylist);\n    },\n    setFilterPlaylist: (state, action) => {\n      const {\n        sort,\n        authors,\n        genres,\n        search\n      } = action.payload;\n      if (authors === \"\") {\n        state.FiltersPlaylist.authors = [];\n      } else if (authors) {\n        if (state.FiltersPlaylist.authors.includes(authors)) {\n          state.FiltersPlaylist.authors = state.FiltersPlaylist.authors.filter(item => item !== authors);\n        } else {\n          state.FiltersPlaylist.authors = [...state.FiltersPlaylist.authors, authors];\n        }\n      }\n      if (genres === \"\") {\n        state.FiltersPlaylist.genres = [];\n      } else if (genres) {\n        if (state.FiltersPlaylist.genres.includes(genres)) {\n          state.FiltersPlaylist.genres = state.FiltersPlaylist.genres.filter(item => item !== genres);\n        } else {\n          state.FiltersPlaylist.genres = [...state.FiltersPlaylist.genres, genres];\n        }\n      }\n      if (sort) {\n        state.FiltersPlaylist.sort = sort;\n      }\n      if ((search === null || search === void 0 ? void 0 : search.length) > 0) {\n        state.FiltersPlaylist.search = search;\n      } else {\n        state.FiltersPlaylist.search = \"\";\n        state.FiltersPlaylist.isActiveSearch = false;\n      }\n      const getFilteredTracks = () => {\n        let filterArray = [];\n        if (state.currentPage === \"Main\") {\n          filterArray = state.allTracks;\n        }\n        if (state.currentPage === \"Favourites\") {\n          filterArray = state.favouritesTracks;\n        }\n        if (state.currentPage === \"Category\") {\n          filterArray = state.categoryArr;\n        }\n\n        // фильтрация\n\n        // по исполнителю\n        if (state.FiltersPlaylist.authors.length > 0) {\n          state.FiltersPlaylist.isActiveAuthors = true;\n          filterArray = filterArray.filter(track => state.FiltersPlaylist.authors.includes(track.author));\n        }\n\n        // по жанру\n        if (state.FiltersPlaylist.genres.length > 0) {\n          state.FiltersPlaylist.isActiveGenres = true;\n          filterArray = filterArray.filter(track => state.FiltersPlaylist.genres.includes(track.genre));\n        }\n\n        // по дате\n        if (state.FiltersPlaylist.sort === \"Сначала новые\") {\n          state.FiltersPlaylist.isActiveSort = true;\n          filterArray = filterArray.sort((a, b) => new Date(b.release_date) - new Date(a.release_date));\n        } else if (state.FiltersPlaylist.sort === \"Сначала старые\") {\n          state.FiltersPlaylist.isActiveSort = true;\n          filterArray = filterArray.sort((a, b) => new Date(a.release_date) - new Date(b.release_date));\n        } else {\n          state.FiltersPlaylist.isActiveSort = false;\n        }\n\n        // поиск\n        if (state.FiltersPlaylist.search.length > 0) {\n          state.FiltersPlaylist.isActiveSearch = true;\n          filterArray = filterArray.filter(item => item.name.toLocaleLowerCase().includes(state.FiltersPlaylist.search.toLocaleLowerCase()));\n        }\n        return filterArray;\n      };\n      state.FiltersPlaylist.filterTracksArr = getFilteredTracks();\n    }\n  }\n});\nexport const {\n  setAllTracks,\n  setTracksRedux,\n  setCurrentTrack,\n  setNextTrack,\n  setPrevTrack,\n  setIsPlaying,\n  toggleShuffleTracks,\n  setFavouriteTracksAll,\n  setCurrentPage,\n  setCurrentPlaylist,\n  setCategoryArr,\n  setFilterPlaylist\n} = trackSlice.actions;\nexport default trackSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","allTracks","currentPage","currentTrack","indexCurrentTrack","isPlaying","shuffled","shuffledAllTracks","favouritesTracks","currentPlaylist","categoryArr","FiltersPlaylist","authors","isActiveAuthors","genres","isActiveGenres","sort","isActiveSort","search","isActiveSearch","filterTracksArr","getShuffledAllTracks","array","arrayTracks","Array","Math","random","trackSlice","name","reducers","setAllTracks","state","action","payload","setFavouriteTracksAll","setIsPlaying","setCurrentPage","setCurrentPlaylist","setCurrentTrack","track","setNextTrack","trackNext","indexNextTrack","setPrevTrack","trackPred","indexPredTrack","setCategoryArr","toggleShuffleTracks","setFilterPlaylist","includes","filter","item","length","getFilteredTracks","filterArray","author","genre","a","b","Date","release_date","toLocaleLowerCase","setTracksRedux","actions","reducer"],"sources":["/Users/viktoriabredihina/Downloads/skypro-music-Course-work/src/store/slices/track.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  allTracks: [],\n  currentPage: \"\",\n  currentTrack: null,\n  indexCurrentTrack: null,\n  isPlaying: false,\n  shuffled: false,\n  shuffledAllTracks: [],\n  favouritesTracks: [],\n  currentPlaylist: [],\n  categoryArr: [],\n  FiltersPlaylist: {\n  authors: [],\n  isActiveAuthors: false,\n  genres: [],\n  isActiveGenres: false,\n  sort: \"По умолчанию\",\n  isActiveSort: false,\n  search: \"\",\n  isActiveSearch: false,\n  filterTracksArr: [],\n  },\n};\n\nconst getShuffledAllTracks = (array) => {\n  const arrayTracks = new Array(...array);\n  return arrayTracks.sort(() => Math.random() - 0.5);\n};\n\nexport const trackSlice = createSlice({\n  name: \"tracksReducer\",\n  initialState,\n  reducers: {\n    setAllTracks: (state, action) => {\n      state.allTracks = action.payload;\n    },\n\n    setFavouriteTracksAll: (state, action) => {\n      state.favouritesTracks = action.payload;\n    },\n\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    setCurrentPlaylist: (state, action) => {\n      state.currentPlaylist = action.payload;\n    },\n\n    setCurrentTrack: (state, action) => {\n      const { track, indexCurrentTrack } = action.payload;\n      state.currentTrack = track;\n      state.indexCurrentTrack = indexCurrentTrack;\n    },\n\n    setNextTrack: (state, action) => {\n      const { trackNext, indexNextTrack } = action.payload;\n      state.currentTrack = trackNext;\n      state.indexCurrentTrack = indexNextTrack;\n    },\n\n    setPrevTrack: (state, action) => {\n      const { trackPred, indexPredTrack } = action.payload;\n      state.currentTrack = trackPred;\n      state.indexCurrentTrack = indexPredTrack;\n    },\n    setCategoryArr: (state, action) => {\n      state.categoryArr = action.payload;\n    },\n    toggleShuffleTracks: (state, action) => {\n      state.shuffled = action.payload;\n\n      if (state.shuffled) {\n      }\n      state.shuffledAllTracks =\n        state.shuffled && getShuffledAllTracks(state.currentPlaylist);\n    },\n    setFilterPlaylist: (state, action) => {\n      const { sort, authors, genres, search } = action.payload;\n\n      if (authors === \"\") {\n        state.FiltersPlaylist.authors = [];\n      } else if (authors) {\n        if (state.FiltersPlaylist.authors.includes(authors)) {\n          state.FiltersPlaylist.authors = state.FiltersPlaylist.authors.filter(\n            (item) => item !== authors\n          );\n        } else {\n          state.FiltersPlaylist.authors = [\n            ...state.FiltersPlaylist.authors,\n            authors,\n          ];\n        }\n      }\n\n      if (genres === \"\") {\n        state.FiltersPlaylist.genres = [];\n      } else if (genres) {\n        if (state.FiltersPlaylist.genres.includes(genres)) {\n          state.FiltersPlaylist.genres = state.FiltersPlaylist.genres.filter(\n            (item) => item !== genres\n          );\n        } else {\n          state.FiltersPlaylist.genres = [\n            ...state.FiltersPlaylist.genres,\n            genres,\n          ];\n        }\n      }\n\n      if (sort) {\n        state.FiltersPlaylist.sort = sort;\n      }\n\n      if (search?.length > 0) {\n        state.FiltersPlaylist.search = search;\n      } else {\n        state.FiltersPlaylist.search = \"\";\n        state.FiltersPlaylist.isActiveSearch = false;\n      }\n\n      const getFilteredTracks = () => {\n        let filterArray = [];\n        if (state.currentPage === \"Main\") {\n          filterArray = state.allTracks;\n        }\n        if (state.currentPage === \"Favourites\") {\n          filterArray = state.favouritesTracks;\n        }\n\n        if (state.currentPage === \"Category\") {\n          filterArray = state.categoryArr;\n        }\n\n        // фильтрация\n\n        // по исполнителю\n        if (state.FiltersPlaylist.authors.length > 0) {\n          state.FiltersPlaylist.isActiveAuthors = true;\n\n          filterArray = filterArray.filter((track) =>\n            state.FiltersPlaylist.authors.includes(track.author)\n          );\n        }\n\n        // по жанру\n        if (state.FiltersPlaylist.genres.length > 0) {\n          state.FiltersPlaylist.isActiveGenres = true;\n\n          filterArray = filterArray.filter((track) =>\n            state.FiltersPlaylist.genres.includes(track.genre)\n          );\n        }\n\n        // по дате\n        if (state.FiltersPlaylist.sort === \"Сначала новые\") {\n          state.FiltersPlaylist.isActiveSort = true;\n\n          filterArray = filterArray.sort(\n            (a, b) => new Date(b.release_date) - new Date(a.release_date)\n          );\n        } else if (state.FiltersPlaylist.sort === \"Сначала старые\") {\n          state.FiltersPlaylist.isActiveSort = true;\n\n          filterArray = filterArray.sort(\n            (a, b) => new Date(a.release_date) - new Date(b.release_date)\n          );\n        } else {\n          state.FiltersPlaylist.isActiveSort = false;\n        }\n\n        // поиск\n        if (state.FiltersPlaylist.search.length > 0) {\n          state.FiltersPlaylist.isActiveSearch = true;\n\n          filterArray = filterArray.filter((item) =>\n            item.name\n              .toLocaleLowerCase()\n              .includes(state.FiltersPlaylist.search.toLocaleLowerCase())\n          );\n        }\n\n        return filterArray;\n      };\n\n      state.FiltersPlaylist.filterTracksArr = getFilteredTracks();\n    },\n  },\n});\n\nexport const {\n  setAllTracks,\n  setTracksRedux,\n  setCurrentTrack,\n  setNextTrack,\n  setPrevTrack,\n  setIsPlaying,\n  toggleShuffleTracks,\n  setFavouriteTracksAll,\n  setCurrentPage,\n  setCurrentPlaylist,\n  setCategoryArr,\n  setFilterPlaylist,\n} = trackSlice.actions;\n\nexport default trackSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}